// src/types.ts

import {
  ColumnType,
  Generated,
  Insertable,
  Selectable,
  Updateable,
} from 'kysely';

export interface Database {
  appUser: AppUserTable;
  pet: ProductTable;
}

export interface AppUserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  auth0_id: string;
  username: string | null;

  // first_name: string;
  // gender: 'man' | 'woman' | 'other';

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  // last_name: string | null;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at: ColumnType<Date, string | undefined, never>;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
export type AppUser = Selectable<AppUserTable>;
export type NewAppUser = Insertable<AppUserTable>;
export type AppUserUpdate = Updateable<AppUserTable>;

export interface ProductTable {
  id: Generated<number>;
  name: string;
  user_id: number;
  software: string;
  genre: string;
  // created_at: Generated<Timestamp>;
  // updated_at: Generated<Timestamp>;
}

export type Product = Selectable<ProductTable>;
export type NewProduct = Insertable<ProductTable>;
export type ProductUpdate = Updateable<ProductTable>;

//

//
// export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
//   ? ColumnType<S, I | undefined, U>
//   : ColumnType<T, T | undefined, T>;

// export type Int8 = ColumnType<
//   string,
//   string | number | bigint,
//   string | number | bigint
// >;

// export type Timestamp = ColumnType<Date, Date | string, Date | string>;

// export interface Products {
//   id: Generated<Int8>;
//   user_id: number;
//   name: string;
//   software: string;
//   genre: string;
//   created_at: Generated<Timestamp>;
//   updated_at: Generated<Timestamp>;
// }

// export interface Users {
//   id: Generated<number>;
//   auth0_id: string;
//   username: string | null;
// }

// export interface DB {
//   knex_migrations: KnexMigrations;
//   knex_migrations_lock: KnexMigrationsLock;
//   products: Products;
//   users: Users;
// }
